import streamlit as st
from PIL import Image
from tensorflow.keras.models import load_model as load_keras_model
from pathlib import Path
import numpy as np
from model.predict_image import model_loader, detect_objects, predict_ct_liver_mask

# X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc
BASE_DIR = Path(__file__).resolve().parent.parent
WEIGHTS_DIR = BASE_DIR / "model" / "weights"
KERAS_DIR = BASE_DIR / "model" / "keras"

# Ph√¢n lo·∫°i ·∫£nh v√† b·ªô ph·∫≠n
IMAGE_TYPES = ["X-Ray", "MRI", "Ultrasound", "CT"]
BODY_PARTS_VI = {
    "Ng·ª±c": "Chest",
    "N√£o": "Brain",
    "Gan": "Liver",
    "B·ª•ng": "Abdomen"
}

def show_image_page():
    st.header("üß† Ph√¢n T√≠ch ·∫¢nh Y T·∫ø")

    # 1. Ch·ªçn lo·∫°i ·∫£nh v√† b·ªô ph·∫≠n; m·∫∑c ƒë·ªãnh CT Gan
    default_img_idx = IMAGE_TYPES.index("CT")
    default_part_idx = list(BODY_PARTS_VI.keys()).index("Gan")
    image_type = st.selectbox("üñºÔ∏è Ch·ªçn lo·∫°i ·∫£nh:", options=IMAGE_TYPES, index=default_img_idx)
    body_part_vi = st.selectbox("üìç Ch·ªçn b·ªô ph·∫≠n c∆° th·ªÉ:", options=list(BODY_PARTS_VI.keys()), index=default_part_idx)
    st.markdown(f"**üîç ƒêang ch·ªçn:** {image_type} - {body_part_vi}")

    # 2. Load model t∆∞∆°ng ·ª©ng (tr·ª´ tr∆∞·ªùng h·ª£p MRI N√£o)
    if not (image_type == "MRI" and body_part_vi == "N√£o"):
        model, model_type = model_loader(image_type, body_part_vi)
        if model is None:
            st.error("‚ùå Kh√¥ng th·ªÉ load m√¥ h√¨nh.")
            return
    else:
        model, model_type = None, "pytorch"  # S·ª≠ d·ª•ng U-Net t·ª´ PyTorch cho MRI N√£o

    # 3. Upload ·∫£nh
    uploaded_files = st.file_uploader(
        "üì§ T·∫£i l√™n ·∫£nh (jpg/png)", type=["jpg", "jpeg", "png"], accept_multiple_files=True
    )

    if not uploaded_files:
        return

    for file in uploaded_files:
        image = Image.open(file)
        
        # Chuy·ªÉn ·∫£nh th√†nh numpy array
        img_array = np.array(image)
        
        # Ki·ªÉm tra v√† chu·∫©n b·ªã ·∫£nh cho MRI N√£o (c·∫ßn 3 k√™nh)
        if image_type == "MRI" and body_part_vi == "N√£o":
            if img_array.ndim == 2:  # ·∫¢nh grayscale
                img_array = np.stack([img_array] * 3, axis=-1)
            elif img_array.shape[-1] == 4:  # X·ª≠ l√Ω ·∫£nh RGBA
                img_array = img_array[:, :, :3]
            elif img_array.shape[-1] != 3:
                st.error("‚ùå ·∫¢nh MRI c·∫ßn c√≥ 3 k√™nh (RGB ho·∫∑c grayscale s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi).")
                continue
            img_array = img_array.astype(np.float32)

        # C·ªôt hi·ªÉn th·ªã song song
        col1, col2 = st.columns(2)

        # C·ªôt 1: ·∫£nh g·ªëc
        with col1:
            st.image(image, caption="üñºÔ∏è ·∫¢nh g·ªëc", use_container_width=True)

        # C·ªôt 2: ·∫£nh k·∫øt qu·∫£
        with col2:
            with st.spinner("üîç ƒêang ph√¢n t√≠ch..."):
                # Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: MRI - N√£o
                if image_type == "MRI" and body_part_vi == "N√£o":
                    st.warning("‚ö†Ô∏è Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c ·∫£nh MRI.")
                    # result_img = detect_brain_abnormalities(img_array)
                    # if result_img is not None:
                    #     st.image(result_img, caption="üéØ K·∫øt qu·∫£ ph√¢n ƒëo·∫°n b·∫•t th∆∞·ªùng (ƒë·ªè)", use_container_width=True)
                    # else:
                    #     
                # Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: CT - Gan
                elif image_type == "CT" and body_part_vi == "Gan":
                    model_path = KERAS_DIR / "final_unet_resnet18_model.keras"
                    mask_img = predict_ct_liver_mask(str(model_path), image)
                    st.image(mask_img, caption="üéØ K·∫øt qu·∫£ ph√¢n ƒëo·∫°n Gan", use_container_width=True)

                # Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng m√¥ h√¨nh Keras
                elif model_type == "keras":
                    img_array = np.array(image.resize((256, 256))) / 255.0
                    mask = model.predict(img_array[None, ...])[0]
                    mask_img = Image.fromarray((mask.squeeze() * 255).astype('uint8'))
                    st.image(mask_img, caption="üéØ K·∫øt qu·∫£ ph√¢n ƒëo·∫°n", use_container_width=True)

                # Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng m√¥ h√¨nh kh√°c (YOLO, v.v.)
                else:
                    result = detect_objects(model, image)
                    if isinstance(result, tuple):
                        result_img, detections = result
                    else:
                        result_img, detections = None, []

                    if result_img is not None:
                        st.image(result_img, caption="üéØ K·∫øt qu·∫£ nh·∫≠n d·∫°ng", use_container_width=True)
                        st.markdown("### üßæ ƒê·ªëi t∆∞·ª£ng ph√°t hi·ªán:")
                        for label, conf in detections:
                            st.write(f"- **{label}** ({conf:.2%})")
                    else:
                        st.warning("‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng ho·∫∑c l·ªói khi ph√¢n t√≠ch.")